""" Functions to handle fonts in settings.py """

# ON CHANGE, ALSO CHANGE page_psalmbord.py (client side code)
fonts = {  # key: name, value: css style class
    "Arial": "font_arial",
    "Courier New": "font_courier_new",
    "Courier Prime": "font_courier_prime",
    "Courier Prime Bold": "font_courier_prime_bold",
    "Verdana": "font_verdana",
}


def frange(start: float, stop: float, step: float):
    """ range() for floats """
    if step == 0:
        raise Exception("step cannot be zero")
    positive = step > 0
    result = start

    if positive:
        def running(): return (result < stop)
    else:
        def running(): return (result > stop)

    while running():
        yield result
        result += step


# ON CHANGE, ALSO CHANGE page_psalmbord.py (client side code)
_fontsize_floats = list(frange(4, 9, 0.5))  # make sure all fonts are in psalmbord.css


def font_size_style_class(font_size: float):
    """ Map 4.0 to fontsize_4_0 """
    return "fontsize_" + str(round(float(font_size), 2)).replace(".", "_")


# key: float, value: style_class
fontsizes = {
    key: font_size_style_class(key) for key in _fontsize_floats
}


def fontsizes_to_css():
    """ Generate css stylesheet code for all available fontsizes """
    r = "/* START AUTO GENERATED BY fontsizes_to_css */\n\n"
    for fontsize, styleclass in fontsizes.items():
        r += f".{styleclass}" + "{ \n"
        r += f"    font-size: {fontsize}vh; \n"
        r += "}\n"
    r += "\n/* END AUTO GENERATED BY fontsizes_to_css */\n"
    return r


def validate_font_name(font_name: str, raise_exc=False):
    if font_name in fonts:
        return font_name
    if raise_exc:
        raise Exception(f"Invalid font_name {font_name}")
    return None


def validate_font_size(font_size: float, raise_exc=False):
    if font_size in fontsizes:
        return font_size
    if raise_exc:
        raise Exception(f"Invalid font_size {font_size}")
    return None


# print(fontsizes_to_css())
#import sys
# sys.exit(0)
